// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package dcrdb

import (
	"context"

	"github.com/jackc/pgconn"
)

const existsAggregatedSignature = `-- name: ExistsAggregatedSignature :one
SELECT EXISTS(SELECT 1 FROM aggregated_signature WHERE signed_hash = $1)
`

func (q *Queries) ExistsAggregatedSignature(ctx context.Context, signedHash []byte) (bool, error) {
	row := q.db.QueryRow(ctx, existsAggregatedSignature, signedHash)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAggregatedSignature = `-- name: GetAggregatedSignature :one
SELECT epoch_id, signed_hash, signers_bitfield, signature FROM aggregated_signature
WHERE signed_hash = $1
`

func (q *Queries) GetAggregatedSignature(ctx context.Context, signedHash []byte) (AggregatedSignature, error) {
	row := q.db.QueryRow(ctx, getAggregatedSignature, signedHash)
	var i AggregatedSignature
	err := row.Scan(
		&i.EpochID,
		&i.SignedHash,
		&i.SignersBitfield,
		&i.Signature,
	)
	return i, err
}

const getCipherBatch = `-- name: GetCipherBatch :one
SELECT epoch_id, transactions FROM cipher_batch
WHERE epoch_id = $1
`

func (q *Queries) GetCipherBatch(ctx context.Context, epochID []byte) (CipherBatch, error) {
	row := q.db.QueryRow(ctx, getCipherBatch, epochID)
	var i CipherBatch
	err := row.Scan(&i.EpochID, &i.Transactions)
	return i, err
}

const getDecryptionKey = `-- name: GetDecryptionKey :one
SELECT epoch_id, key FROM decryption_key
WHERE epoch_id = $1
`

func (q *Queries) GetDecryptionKey(ctx context.Context, epochID []byte) (DecryptionKey, error) {
	row := q.db.QueryRow(ctx, getDecryptionKey, epochID)
	var i DecryptionKey
	err := row.Scan(&i.EpochID, &i.Key)
	return i, err
}

const getDecryptionSignature = `-- name: GetDecryptionSignature :one
SELECT epoch_id, signed_hash, signers_bitfield, signature FROM decryption_signature
WHERE epoch_id = $1 AND signers_bitfield = $2
`

type GetDecryptionSignatureParams struct {
	EpochID         []byte
	SignersBitfield []byte
}

func (q *Queries) GetDecryptionSignature(ctx context.Context, arg GetDecryptionSignatureParams) (DecryptionSignature, error) {
	row := q.db.QueryRow(ctx, getDecryptionSignature, arg.EpochID, arg.SignersBitfield)
	var i DecryptionSignature
	err := row.Scan(
		&i.EpochID,
		&i.SignedHash,
		&i.SignersBitfield,
		&i.Signature,
	)
	return i, err
}

const getDecryptionSignatures = `-- name: GetDecryptionSignatures :many
SELECT epoch_id, signed_hash, signers_bitfield, signature FROM decryption_signature
WHERE epoch_id = $1 AND signed_hash = $2
`

type GetDecryptionSignaturesParams struct {
	EpochID    []byte
	SignedHash []byte
}

func (q *Queries) GetDecryptionSignatures(ctx context.Context, arg GetDecryptionSignaturesParams) ([]DecryptionSignature, error) {
	rows, err := q.db.Query(ctx, getDecryptionSignatures, arg.EpochID, arg.SignedHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DecryptionSignature
	for rows.Next() {
		var i DecryptionSignature
		if err := rows.Scan(
			&i.EpochID,
			&i.SignedHash,
			&i.SignersBitfield,
			&i.Signature,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEonPublicKey = `-- name: GetEonPublicKey :one
SELECT eon_public_key
FROM eon_public_key
WHERE activation_block_number <= $1
ORDER BY activation_block_number DESC LIMIT 1
`

func (q *Queries) GetEonPublicKey(ctx context.Context, activationBlockNumber int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getEonPublicKey, activationBlockNumber)
	var eon_public_key []byte
	err := row.Scan(&eon_public_key)
	return eon_public_key, err
}

const insertAggregatedSignature = `-- name: InsertAggregatedSignature :execresult
INSERT INTO aggregated_signature (
    epoch_id, signed_hash, signers_bitfield, signature
) VALUES (
    $1, $2, $3, $4
)
ON CONFLICT DO NOTHING
`

type InsertAggregatedSignatureParams struct {
	EpochID         []byte
	SignedHash      []byte
	SignersBitfield []byte
	Signature       []byte
}

func (q *Queries) InsertAggregatedSignature(ctx context.Context, arg InsertAggregatedSignatureParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertAggregatedSignature,
		arg.EpochID,
		arg.SignedHash,
		arg.SignersBitfield,
		arg.Signature,
	)
}

const insertCipherBatch = `-- name: InsertCipherBatch :execresult
INSERT INTO cipher_batch (
    epoch_id, transactions
) VALUES (
    $1, $2
)
ON CONFLICT DO NOTHING
`

type InsertCipherBatchParams struct {
	EpochID      []byte
	Transactions [][]byte
}

func (q *Queries) InsertCipherBatch(ctx context.Context, arg InsertCipherBatchParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertCipherBatch, arg.EpochID, arg.Transactions)
}

const insertDecryptionKey = `-- name: InsertDecryptionKey :execresult
INSERT INTO decryption_key (
    epoch_id, key
) VALUES (
    $1, $2
)
ON CONFLICT DO NOTHING
`

type InsertDecryptionKeyParams struct {
	EpochID []byte
	Key     []byte
}

func (q *Queries) InsertDecryptionKey(ctx context.Context, arg InsertDecryptionKeyParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertDecryptionKey, arg.EpochID, arg.Key)
}

const insertDecryptionSignature = `-- name: InsertDecryptionSignature :execresult
INSERT INTO decryption_signature (
    epoch_id, signed_hash, signers_bitfield, signature
) VALUES (
    $1, $2, $3, $4
)
ON CONFLICT DO NOTHING
`

type InsertDecryptionSignatureParams struct {
	EpochID         []byte
	SignedHash      []byte
	SignersBitfield []byte
	Signature       []byte
}

func (q *Queries) InsertDecryptionSignature(ctx context.Context, arg InsertDecryptionSignatureParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertDecryptionSignature,
		arg.EpochID,
		arg.SignedHash,
		arg.SignersBitfield,
		arg.Signature,
	)
}

const insertEonPublicKey = `-- name: InsertEonPublicKey :exec
INSERT INTO eon_public_key (
    activation_block_number,
    eon_public_key
) VALUES (
    $1, $2
)
`

type InsertEonPublicKeyParams struct {
	ActivationBlockNumber int64
	EonPublicKey          []byte
}

func (q *Queries) InsertEonPublicKey(ctx context.Context, arg InsertEonPublicKeyParams) error {
	_, err := q.db.Exec(ctx, insertEonPublicKey, arg.ActivationBlockNumber, arg.EonPublicKey)
	return err
}
