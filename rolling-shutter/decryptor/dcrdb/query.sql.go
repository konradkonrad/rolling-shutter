// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package dcrdb

import (
	"context"

	"github.com/jackc/pgconn"
)

const getCipherBatch = `-- name: GetCipherBatch :one
SELECT epoch_id, data FROM decryptor.cipher_batch
WHERE epoch_id = $1
`

func (q *Queries) GetCipherBatch(ctx context.Context, epochID int64) (DecryptorCipherBatch, error) {
	row := q.db.QueryRow(ctx, getCipherBatch, epochID)
	var i DecryptorCipherBatch
	err := row.Scan(&i.EpochID, &i.Data)
	return i, err
}

const getDecryptionKey = `-- name: GetDecryptionKey :one
SELECT epoch_id, key FROM decryptor.decryption_key
WHERE epoch_id = $1
`

func (q *Queries) GetDecryptionKey(ctx context.Context, epochID int64) (DecryptorDecryptionKey, error) {
	row := q.db.QueryRow(ctx, getDecryptionKey, epochID)
	var i DecryptorDecryptionKey
	err := row.Scan(&i.EpochID, &i.Key)
	return i, err
}

const getDecryptionSignature = `-- name: GetDecryptionSignature :one
SELECT epoch_id, signed_hash, signer_index, signature FROM decryptor.decryption_signature
WHERE epoch_id = $1 AND signer_index = $2
`

type GetDecryptionSignatureParams struct {
	EpochID     int64
	SignerIndex int64
}

func (q *Queries) GetDecryptionSignature(ctx context.Context, arg GetDecryptionSignatureParams) (DecryptorDecryptionSignature, error) {
	row := q.db.QueryRow(ctx, getDecryptionSignature, arg.EpochID, arg.SignerIndex)
	var i DecryptorDecryptionSignature
	err := row.Scan(
		&i.EpochID,
		&i.SignedHash,
		&i.SignerIndex,
		&i.Signature,
	)
	return i, err
}

const getMeta = `-- name: GetMeta :one
SELECT key, value FROM decryptor.meta_inf WHERE key = $1
`

func (q *Queries) GetMeta(ctx context.Context, key string) (DecryptorMetaInf, error) {
	row := q.db.QueryRow(ctx, getMeta, key)
	var i DecryptorMetaInf
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const insertCipherBatch = `-- name: InsertCipherBatch :execresult
INSERT INTO decryptor.cipher_batch (
    epoch_id, data
) VALUES (
    $1, $2
)
ON CONFLICT DO NOTHING
`

type InsertCipherBatchParams struct {
	EpochID int64
	Data    []byte
}

func (q *Queries) InsertCipherBatch(ctx context.Context, arg InsertCipherBatchParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertCipherBatch, arg.EpochID, arg.Data)
}

const insertDecryptionKey = `-- name: InsertDecryptionKey :execresult
INSERT INTO decryptor.decryption_key (
    epoch_id, key
) VALUES (
    $1, $2
)
ON CONFLICT DO NOTHING
`

type InsertDecryptionKeyParams struct {
	EpochID int64
	Key     []byte
}

func (q *Queries) InsertDecryptionKey(ctx context.Context, arg InsertDecryptionKeyParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertDecryptionKey, arg.EpochID, arg.Key)
}

const insertDecryptionSignature = `-- name: InsertDecryptionSignature :execresult
INSERT INTO decryptor.decryption_signature (
    epoch_id, signed_hash, signer_index, signature
) VALUES (
    $1, $2, $3, $4
)
ON CONFLICT DO NOTHING
`

type InsertDecryptionSignatureParams struct {
	EpochID     int64
	SignedHash  []byte
	SignerIndex int64
	Signature   []byte
}

func (q *Queries) InsertDecryptionSignature(ctx context.Context, arg InsertDecryptionSignatureParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertDecryptionSignature,
		arg.EpochID,
		arg.SignedHash,
		arg.SignerIndex,
		arg.Signature,
	)
}

const insertMeta = `-- name: InsertMeta :exec
INSERT INTO decryptor.meta_inf (key, value) VALUES ($1, $2)
`

type InsertMetaParams struct {
	Key   string
	Value string
}

func (q *Queries) InsertMeta(ctx context.Context, arg InsertMetaParams) error {
	_, err := q.db.Exec(ctx, insertMeta, arg.Key, arg.Value)
	return err
}
