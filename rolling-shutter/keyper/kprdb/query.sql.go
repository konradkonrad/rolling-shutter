// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package kprdb

import (
	"context"
)

const getDecryptionKey = `-- name: GetDecryptionKey :one
SELECT epoch_id, keyper_index, decryption_key FROM keyper.decryption_key
WHERE epoch_id = $1
`

func (q *Queries) GetDecryptionKey(ctx context.Context, epochID int64) (KeyperDecryptionKey, error) {
	row := q.db.QueryRow(ctx, getDecryptionKey, epochID)
	var i KeyperDecryptionKey
	err := row.Scan(&i.EpochID, &i.KeyperIndex, &i.DecryptionKey)
	return i, err
}

const getMeta = `-- name: GetMeta :one
SELECT key, value FROM keyper.meta_inf WHERE key = $1
`

func (q *Queries) GetMeta(ctx context.Context, key string) (KeyperMetaInf, error) {
	row := q.db.QueryRow(ctx, getMeta, key)
	var i KeyperMetaInf
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const insertMeta = `-- name: InsertMeta :exec
INSERT INTO keyper.meta_inf (key, value) VALUES ($1, $2)
`

type InsertMetaParams struct {
	Key   string
	Value string
}

func (q *Queries) InsertMeta(ctx context.Context, arg InsertMetaParams) error {
	_, err := q.db.Exec(ctx, insertMeta, arg.Key, arg.Value)
	return err
}
